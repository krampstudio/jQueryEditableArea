{"ts":1347110800084,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"ï»¿/*\n * $('#target').pluginName(options); calls Plugin.init(options)\n * $('#target').pluginName('aMethod'); calls public method Plugin.aMethod();\n */\n(function( $ ){\n    \"use strict\";\n    \n    var Plugin = {\n        _opts : {\n\t\t\t//contains default options\n        },\n\t\tbubble : null,\n        init: function(options){\n            var opts = $.extend(true, {}, InfoBubble._opts, options);\n            return this.each(function() {\n                var $elt = $(this);\n\t\t\t\t//initialisation code\n\t\t\t\t});\n        },\n\t\taMethod : function(){\n\t\t\tthis.each(function() {\n                var $elt = $(this);\n\t\t\t\t//a plublic method\n            });\n\t\t},\n\t\t_anotherMethod : function(){\n\t\t\tthis.each(function() {\n                var $elt = $(this);\n                //a private method\n            });\n\t\t},\n        destroy : function(){\n            this.each(function() {\n            \tvar $elt = $(this);\n\t\t\t\t//destroy code\t\n\t\t\t});\n        }\n    };\n\n    $.fn.pluginName = function( method ) {        \n        if ( Plugin[method] ) {\n\t\t\tif(/^_/.test(method)){\n\t\t\t\t$.error( 'Trying to call a private method ' +  method + ' on jQuery.pluginName' );\n\t\t\t} else {\n\t\t\t\treturn Plugin[method].apply( this, Array.prototype.slice.call( arguments, 1 ));\n        \t}\n\t\t} else if ( typeof method === 'object' || ! method) {\n        \treturn Plugin.init.apply( this, arguments );\n        } else {\n          \t$.error( 'Method ' +  method + ' does not exist on jQuery.pluginName' );\n        }\n    };\n\n})( jQuery );\n"]],"start1":0,"start2":0,"length1":0,"length2":1477}]],"length":1477}
